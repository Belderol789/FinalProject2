//
//  UserInterfaceDesign.swift
//  FinalProject
//
//  Created by Yohan on 22/05/2017.
//  Copyright Â© 2017 Group2. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class UserInterfaceDesign : NSObject {

    //// Cache

    private struct Cache {
        static let foodCategory: UIColor = UIColor(red: 1.000, green: 0.685, blue: 0.000, alpha: 1.000)
        static let foodCategoryOverlay: UIColor = UserInterfaceDesign.foodCategory.withAlpha(0.3)
        static let entertainmentCategory: UIColor = UIColor(red: 0.710, green: 0.000, blue: 1.000, alpha: 1.000)
        static let entertainmentCategoryOverlay: UIColor = UserInterfaceDesign.entertainmentCategory.withAlpha(0.2)
        static let sportCategory: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let sportCategoryOverlay: UIColor = UserInterfaceDesign.sportCategory.withAlpha(0.2)
        static let vacationCategory: UIColor = UIColor(red: 0.000, green: 0.999, blue: 1.000, alpha: 1.000)
        static let vacationCategoryOverlay: UIColor = UserInterfaceDesign.vacationCategory.withAlpha(0.2)
        static let discussionCategory: UIColor = UIColor(red: 0.000, green: 1.000, blue: 0.005, alpha: 1.000)
        static let discussionCategoryOverlay: UIColor = UserInterfaceDesign.discussionCategory.withAlpha(0.2)
        static let artCategory: UIColor = UIColor(red: 0.000, green: 0.117, blue: 1.000, alpha: 1.000)
        static let artCategoryOverlay: UIColor = UserInterfaceDesign.artCategory.withAlpha(0.3)
    }

    //// Colors

    public dynamic class var foodCategory: UIColor { return Cache.foodCategory }
    public dynamic class var foodCategoryOverlay: UIColor { return Cache.foodCategoryOverlay }
    public dynamic class var entertainmentCategory: UIColor { return Cache.entertainmentCategory }
    public dynamic class var entertainmentCategoryOverlay: UIColor { return Cache.entertainmentCategoryOverlay }
    public dynamic class var sportCategory: UIColor { return Cache.sportCategory }
    public dynamic class var sportCategoryOverlay: UIColor { return Cache.sportCategoryOverlay }
    public dynamic class var vacationCategory: UIColor { return Cache.vacationCategory }
    public dynamic class var vacationCategoryOverlay: UIColor { return Cache.vacationCategoryOverlay }
    public dynamic class var discussionCategory: UIColor { return Cache.discussionCategory }
    public dynamic class var discussionCategoryOverlay: UIColor { return Cache.discussionCategoryOverlay }
    public dynamic class var artCategory: UIColor { return Cache.artCategory }
    public dynamic class var artCategoryOverlay: UIColor { return Cache.artCategoryOverlay }

    //// Drawing Methods

    public dynamic class func drawEntertainmentCategory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 768, height: 768), resizing: ResizingBehavior = .aspectFit, pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 768, height: 768), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 768, y: resizedFrame.height / 768)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let entertaintment = UIImage(named: "entertaintment.jpg")!
        let entertaintmentBlackAndWhite = UIImage(named: "entertaintmentBlackAndWhite.jpg")!

        //// Picture Drawing
        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 768, height: 768))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -entertaintmentBlackAndWhite.size.height)
        context.draw(entertaintmentBlackAndWhite.cgImage!, in: CGRect(x: 0, y: 0, width: entertaintmentBlackAndWhite.size.width, height: entertaintmentBlackAndWhite.size.height))
        context.restoreGState()


        //// Group 4
        //// Group 3
        //// Text Drawing
        let textRect = CGRect(x: 44, y: 108, width: 157, height: 203)
        let textTextContent = "E"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 564, y: 108, width: 157, height: 203)
        let text2TextContent = "R"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 179, y: 108, width: 149, height: 203)
        let text4TextContent = "N"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text4Style]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 323, y: 108, width: 149, height: 203)
        let text5TextContent = "T"
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text5Style]

        let text5TextHeight: CGFloat = text5TextContent.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        text5TextContent.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: 447, y: 108, width: 149, height: 203)
        let text6TextContent = "E"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text6Style]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()




        //// Group 2
        //// Text 7 Drawing
        let text7Rect = CGRect(x: 49, y: 283, width: 175, height: 203)
        let text7TextContent = "T"
        let text7Style = NSMutableParagraphStyle()
        text7Style.alignment = .center
        let text7FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text7Style]

        let text7TextHeight: CGFloat = text7TextContent.boundingRect(with: CGSize(width: text7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text7Rect)
        text7TextContent.draw(in: CGRect(x: text7Rect.minX, y: text7Rect.minY + (text7Rect.height - text7TextHeight) / 2, width: text7Rect.width, height: text7TextHeight), withAttributes: text7FontAttributes)
        context.restoreGState()


        //// Text 8 Drawing
        let text8Rect = CGRect(x: 235, y: 283, width: 157, height: 203)
        let text8TextContent = "A"
        let text8Style = NSMutableParagraphStyle()
        text8Style.alignment = .center
        let text8FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text8Style]

        let text8TextHeight: CGFloat = text8TextContent.boundingRect(with: CGSize(width: text8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text8Rect)
        text8TextContent.draw(in: CGRect(x: text8Rect.minX, y: text8Rect.minY + (text8Rect.height - text8TextHeight) / 2, width: text8Rect.width, height: text8TextHeight), withAttributes: text8FontAttributes)
        context.restoreGState()


        //// Text 9 Drawing
        let text9Rect = CGRect(x: 394, y: 283, width: 157, height: 203)
        let text9TextContent = "I"
        let text9Style = NSMutableParagraphStyle()
        text9Style.alignment = .center
        let text9FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text9Style]

        let text9TextHeight: CGFloat = text9TextContent.boundingRect(with: CGSize(width: text9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text9Rect)
        text9TextContent.draw(in: CGRect(x: text9Rect.minX, y: text9Rect.minY + (text9Rect.height - text9TextHeight) / 2, width: text9Rect.width, height: text9TextHeight), withAttributes: text9FontAttributes)
        context.restoreGState()


        //// Text 10 Drawing
        let text10Rect = CGRect(x: 564, y: 283, width: 157, height: 203)
        let text10TextContent = "N"
        let text10Style = NSMutableParagraphStyle()
        text10Style.alignment = .center
        let text10FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text10Style]

        let text10TextHeight: CGFloat = text10TextContent.boundingRect(with: CGSize(width: text10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text10Rect)
        text10TextContent.draw(in: CGRect(x: text10Rect.minX, y: text10Rect.minY + (text10Rect.height - text10TextHeight) / 2, width: text10Rect.width, height: text10TextHeight), withAttributes: text10FontAttributes)
        context.restoreGState()




        //// Group
        //// Text 3 Drawing
        let text3Rect = CGRect(x: 68, y: 457, width: 175, height: 203)
        let text3TextContent = "M"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 11 Drawing
        let text11Rect = CGRect(x: 250, y: 457, width: 157, height: 203)
        let text11TextContent = "E"
        let text11Style = NSMutableParagraphStyle()
        text11Style.alignment = .center
        let text11FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text11Style]

        let text11TextHeight: CGFloat = text11TextContent.boundingRect(with: CGSize(width: text11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text11Rect)
        text11TextContent.draw(in: CGRect(x: text11Rect.minX, y: text11Rect.minY + (text11Rect.height - text11TextHeight) / 2, width: text11Rect.width, height: text11TextHeight), withAttributes: text11FontAttributes)
        context.restoreGState()


        //// Text 12 Drawing
        let text12Rect = CGRect(x: 408, y: 457, width: 157, height: 203)
        let text12TextContent = "N"
        let text12Style = NSMutableParagraphStyle()
        text12Style.alignment = .center
        let text12FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text12Style]

        let text12TextHeight: CGFloat = text12TextContent.boundingRect(with: CGSize(width: text12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text12Rect)
        text12TextContent.draw(in: CGRect(x: text12Rect.minX, y: text12Rect.minY + (text12Rect.height - text12TextHeight) / 2, width: text12Rect.width, height: text12TextHeight), withAttributes: text12FontAttributes)
        context.restoreGState()


        //// Text 13 Drawing
        let text13Rect = CGRect(x: 567, y: 457, width: 157, height: 203)
        let text13TextContent = "T"
        let text13Style = NSMutableParagraphStyle()
        text13Style.alignment = .center
        let text13FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: UserInterfaceDesign.entertainmentCategory, NSParagraphStyleAttributeName: text13Style]

        let text13TextHeight: CGFloat = text13TextContent.boundingRect(with: CGSize(width: text13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text13Rect)
        text13TextContent.draw(in: CGRect(x: text13Rect.minX, y: text13Rect.minY + (text13Rect.height - text13TextHeight) / 2, width: text13Rect.width, height: text13TextHeight), withAttributes: text13FontAttributes)
        context.restoreGState()






        if (pressed) {
            //// Group 5
            //// Picture 2 Drawing
            let picture2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 768, height: 768))
            context.saveGState()
            picture2Path.addClip()
            context.translateBy(x: 0, y: 0)
            context.scaleBy(x: 1, y: -1)
            context.translateBy(x: 0, y: -entertaintment.size.height)
            context.draw(entertaintment.cgImage!, in: CGRect(x: 0, y: 0, width: entertaintment.size.width, height: entertaintment.size.height))
            context.restoreGState()


            //// Group 6
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 768, height: 768))
            UserInterfaceDesign.entertainmentCategoryOverlay.setFill()
            rectanglePath.fill()


            //// Group 7
            //// Text 14 Drawing
            let text14Rect = CGRect(x: 44, y: 108, width: 157, height: 203)
            let text14TextContent = "E"
            let text14Style = NSMutableParagraphStyle()
            text14Style.alignment = .center
            let text14FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text14Style]

            let text14TextHeight: CGFloat = text14TextContent.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text14Rect)
            text14TextContent.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
            context.restoreGState()


            //// Text 15 Drawing
            let text15Rect = CGRect(x: 564, y: 108, width: 157, height: 203)
            let text15TextContent = "R"
            let text15Style = NSMutableParagraphStyle()
            text15Style.alignment = .center
            let text15FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text15Style]

            let text15TextHeight: CGFloat = text15TextContent.boundingRect(with: CGSize(width: text15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text15FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text15Rect)
            text15TextContent.draw(in: CGRect(x: text15Rect.minX, y: text15Rect.minY + (text15Rect.height - text15TextHeight) / 2, width: text15Rect.width, height: text15TextHeight), withAttributes: text15FontAttributes)
            context.restoreGState()


            //// Text 16 Drawing
            let text16Rect = CGRect(x: 179, y: 108, width: 149, height: 203)
            let text16TextContent = "N"
            let text16Style = NSMutableParagraphStyle()
            text16Style.alignment = .center
            let text16FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text16Style]

            let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text16Rect)
            text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
            context.restoreGState()


            //// Text 17 Drawing
            let text17Rect = CGRect(x: 323, y: 108, width: 149, height: 203)
            let text17TextContent = "T"
            let text17Style = NSMutableParagraphStyle()
            text17Style.alignment = .center
            let text17FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text17Style]

            let text17TextHeight: CGFloat = text17TextContent.boundingRect(with: CGSize(width: text17Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text17FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text17Rect)
            text17TextContent.draw(in: CGRect(x: text17Rect.minX, y: text17Rect.minY + (text17Rect.height - text17TextHeight) / 2, width: text17Rect.width, height: text17TextHeight), withAttributes: text17FontAttributes)
            context.restoreGState()


            //// Text 18 Drawing
            let text18Rect = CGRect(x: 447, y: 108, width: 149, height: 203)
            let text18TextContent = "E"
            let text18Style = NSMutableParagraphStyle()
            text18Style.alignment = .center
            let text18FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text18Style]

            let text18TextHeight: CGFloat = text18TextContent.boundingRect(with: CGSize(width: text18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text18FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text18Rect)
            text18TextContent.draw(in: CGRect(x: text18Rect.minX, y: text18Rect.minY + (text18Rect.height - text18TextHeight) / 2, width: text18Rect.width, height: text18TextHeight), withAttributes: text18FontAttributes)
            context.restoreGState()




            //// Group 8
            //// Text 19 Drawing
            let text19Rect = CGRect(x: 49, y: 283, width: 175, height: 203)
            let text19TextContent = "T"
            let text19Style = NSMutableParagraphStyle()
            text19Style.alignment = .center
            let text19FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text19Style]

            let text19TextHeight: CGFloat = text19TextContent.boundingRect(with: CGSize(width: text19Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text19FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text19Rect)
            text19TextContent.draw(in: CGRect(x: text19Rect.minX, y: text19Rect.minY + (text19Rect.height - text19TextHeight) / 2, width: text19Rect.width, height: text19TextHeight), withAttributes: text19FontAttributes)
            context.restoreGState()


            //// Text 20 Drawing
            let text20Rect = CGRect(x: 235, y: 283, width: 157, height: 203)
            let text20TextContent = "A"
            let text20Style = NSMutableParagraphStyle()
            text20Style.alignment = .center
            let text20FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text20Style]

            let text20TextHeight: CGFloat = text20TextContent.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text20Rect)
            text20TextContent.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
            context.restoreGState()


            //// Text 21 Drawing
            let text21Rect = CGRect(x: 394, y: 283, width: 157, height: 203)
            let text21TextContent = "I"
            let text21Style = NSMutableParagraphStyle()
            text21Style.alignment = .center
            let text21FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text21Style]

            let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text21Rect)
            text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
            context.restoreGState()


            //// Text 22 Drawing
            let text22Rect = CGRect(x: 564, y: 283, width: 157, height: 203)
            let text22TextContent = "N"
            let text22Style = NSMutableParagraphStyle()
            text22Style.alignment = .center
            let text22FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text22Style]

            let text22TextHeight: CGFloat = text22TextContent.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text22Rect)
            text22TextContent.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
            context.restoreGState()




            //// Group 9
            //// Text 23 Drawing
            let text23Rect = CGRect(x: 68, y: 457, width: 175, height: 203)
            let text23TextContent = "M"
            let text23Style = NSMutableParagraphStyle()
            text23Style.alignment = .center
            let text23FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text23Style]

            let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text23Rect)
            text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
            context.restoreGState()


            //// Text 24 Drawing
            let text24Rect = CGRect(x: 250, y: 457, width: 157, height: 203)
            let text24TextContent = "E"
            let text24Style = NSMutableParagraphStyle()
            text24Style.alignment = .center
            let text24FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text24Style]

            let text24TextHeight: CGFloat = text24TextContent.boundingRect(with: CGSize(width: text24Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text24FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text24Rect)
            text24TextContent.draw(in: CGRect(x: text24Rect.minX, y: text24Rect.minY + (text24Rect.height - text24TextHeight) / 2, width: text24Rect.width, height: text24TextHeight), withAttributes: text24FontAttributes)
            context.restoreGState()


            //// Text 25 Drawing
            let text25Rect = CGRect(x: 408, y: 457, width: 157, height: 203)
            let text25TextContent = "N"
            let text25Style = NSMutableParagraphStyle()
            text25Style.alignment = .center
            let text25FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text25Style]

            let text25TextHeight: CGFloat = text25TextContent.boundingRect(with: CGSize(width: text25Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text25FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text25Rect)
            text25TextContent.draw(in: CGRect(x: text25Rect.minX, y: text25Rect.minY + (text25Rect.height - text25TextHeight) / 2, width: text25Rect.width, height: text25TextHeight), withAttributes: text25FontAttributes)
            context.restoreGState()


            //// Text 26 Drawing
            let text26Rect = CGRect(x: 567, y: 457, width: 157, height: 203)
            let text26TextContent = "T"
            let text26Style = NSMutableParagraphStyle()
            text26Style.alignment = .center
            let text26FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 223), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text26Style]

            let text26TextHeight: CGFloat = text26TextContent.boundingRect(with: CGSize(width: text26Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text26FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text26Rect)
            text26TextContent.draw(in: CGRect(x: text26Rect.minX, y: text26Rect.minY + (text26Rect.height - text26TextHeight) / 2, width: text26Rect.width, height: text26TextHeight), withAttributes: text26FontAttributes)
            context.restoreGState()






        }
        
        context.restoreGState()

    }

    public dynamic class func drawFoodCategory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 800, height: 800), resizing: ResizingBehavior = .aspectFit, pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 800, height: 800), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 800, y: resizedFrame.height / 800)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let food = UIImage(named: "food.jpg")!
        let foodBlackAndWhite = UIImage(named: "foodBlackAndWhite.jpg")!

        //// Picture Drawing
        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 800, height: 800))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -foodBlackAndWhite.size.height)
        context.draw(foodBlackAndWhite.cgImage!, in: CGRect(x: 0, y: 0, width: foodBlackAndWhite.size.width, height: foodBlackAndWhite.size.height))
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 66, y: 239, width: 669, height: 322)
        let textTextContent = "FOOD"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 250), NSForegroundColorAttributeName: UserInterfaceDesign.foodCategory, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        if (pressed) {
            //// Group
            //// Picture 2 Drawing
            let picture2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 800, height: 800))
            context.saveGState()
            picture2Path.addClip()
            context.translateBy(x: 0, y: 0)
            context.scaleBy(x: 1, y: -1)
            context.translateBy(x: 0, y: -food.size.height)
            context.draw(food.cgImage!, in: CGRect(x: 0, y: 0, width: food.size.width, height: food.size.height))
            context.restoreGState()


            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 1, y: 0, width: 800, height: 800))
            UserInterfaceDesign.foodCategoryOverlay.setFill()
            rectanglePath.fill()


            //// Text 2 Drawing
            let text2Rect = CGRect(x: 66, y: 239, width: 669, height: 322)
            let text2TextContent = "FOOD"
            let text2Style = NSMutableParagraphStyle()
            text2Style.alignment = .left
            let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 250), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text2Style]

            let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text2Rect)
            text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
            context.restoreGState()


        }
        
        context.restoreGState()

    }

    public dynamic class func drawSportCategory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 563, height: 563), resizing: ResizingBehavior = .aspectFit, pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 563, height: 563), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 563, y: resizedFrame.height / 563)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let sport = UIImage(named: "sport.jpg")!
        let sportBlackAndWhite = UIImage(named: "sportBlackAndWhite.jpg")!

        //// Picture Drawing
        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 563, height: 563))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -sportBlackAndWhite.size.height)
        context.draw(sportBlackAndWhite.cgImage!, in: CGRect(x: 0, y: 0, width: sportBlackAndWhite.size.width, height: sportBlackAndWhite.size.height))
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 31, y: 180, width: 502, height: 202)
        let textTextContent = "SPORT"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: UserInterfaceDesign.sportCategory, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        if (pressed) {
            //// Group
            //// Picture 2 Drawing
            let picture2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 563, height: 563))
            context.saveGState()
            picture2Path.addClip()
            context.translateBy(x: 0, y: 0)
            context.scaleBy(x: 1, y: -1)
            context.translateBy(x: 0, y: -sport.size.height)
            context.draw(sport.cgImage!, in: CGRect(x: 0, y: 0, width: sport.size.width, height: sport.size.height))
            context.restoreGState()


            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 563, height: 563))
            UserInterfaceDesign.sportCategoryOverlay.setFill()
            rectanglePath.fill()


            //// Text 2 Drawing
            let text2Rect = CGRect(x: 31, y: 180, width: 502, height: 202)
            let text2TextContent = "SPORT"
            let text2Style = NSMutableParagraphStyle()
            text2Style.alignment = .left
            let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text2Style]

            let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text2Rect)
            text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
            context.restoreGState()


        }
        
        context.restoreGState()

    }

    public dynamic class func drawDiscussionCategory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 533, height: 533), resizing: ResizingBehavior = .aspectFit, pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 533, height: 533), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 533, y: resizedFrame.height / 533)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let discussionBlackAndWhite = UIImage(named: "discussionBlackAndWhite.jpg")!
        let discussion = UIImage(named: "discussion.jpg")!

        //// Picture Drawing
        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 533, height: 533))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -discussionBlackAndWhite.size.height)
        context.draw(discussionBlackAndWhite.cgImage!, in: CGRect(x: 0, y: 0, width: discussionBlackAndWhite.size.width, height: discussionBlackAndWhite.size.height))
        context.restoreGState()


        //// Group
        //// Text 3 Drawing
        let text3Rect = CGRect(x: 21, y: 111, width: 109, height: 202)
        let text3TextContent = "D"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: UserInterfaceDesign.discussionCategory, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 85, y: 111, width: 109, height: 202)
        let textTextContent = "I"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: UserInterfaceDesign.discussionCategory, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 143, y: 111, width: 109, height: 202)
        let text2TextContent = "S"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: UserInterfaceDesign.discussionCategory, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 230, y: 111, width: 109, height: 202)
        let text4TextContent = "C"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: UserInterfaceDesign.discussionCategory, NSParagraphStyleAttributeName: text4Style]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 322, y: 111, width: 109, height: 202)
        let text5TextContent = "U"
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: UserInterfaceDesign.discussionCategory, NSParagraphStyleAttributeName: text5Style]

        let text5TextHeight: CGFloat = text5TextContent.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        text5TextContent.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: 404, y: 111, width: 109, height: 202)
        let text6TextContent = "S"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: UserInterfaceDesign.discussionCategory, NSParagraphStyleAttributeName: text6Style]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Text 7 Drawing
        let text7Rect = CGRect(x: 21, y: 220, width: 109, height: 202)
        let text7TextContent = "S"
        let text7Style = NSMutableParagraphStyle()
        text7Style.alignment = .center
        let text7FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: UserInterfaceDesign.discussionCategory, NSParagraphStyleAttributeName: text7Style]

        let text7TextHeight: CGFloat = text7TextContent.boundingRect(with: CGSize(width: text7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text7Rect)
        text7TextContent.draw(in: CGRect(x: text7Rect.minX, y: text7Rect.minY + (text7Rect.height - text7TextHeight) / 2, width: text7Rect.width, height: text7TextHeight), withAttributes: text7FontAttributes)
        context.restoreGState()


        //// Text 8 Drawing
        let text8Rect = CGRect(x: 139, y: 220, width: 109, height: 202)
        let text8TextContent = "I"
        let text8Style = NSMutableParagraphStyle()
        text8Style.alignment = .center
        let text8FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: UserInterfaceDesign.discussionCategory, NSParagraphStyleAttributeName: text8Style]

        let text8TextHeight: CGFloat = text8TextContent.boundingRect(with: CGSize(width: text8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text8Rect)
        text8TextContent.draw(in: CGRect(x: text8Rect.minX, y: text8Rect.minY + (text8Rect.height - text8TextHeight) / 2, width: text8Rect.width, height: text8TextHeight), withAttributes: text8FontAttributes)
        context.restoreGState()


        //// Text 9 Drawing
        let text9Rect = CGRect(x: 261, y: 220, width: 109, height: 202)
        let text9TextContent = "O"
        let text9Style = NSMutableParagraphStyle()
        text9Style.alignment = .center
        let text9FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: UserInterfaceDesign.discussionCategory, NSParagraphStyleAttributeName: text9Style]

        let text9TextHeight: CGFloat = text9TextContent.boundingRect(with: CGSize(width: text9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text9Rect)
        text9TextContent.draw(in: CGRect(x: text9Rect.minX, y: text9Rect.minY + (text9Rect.height - text9TextHeight) / 2, width: text9Rect.width, height: text9TextHeight), withAttributes: text9FontAttributes)
        context.restoreGState()


        //// Text 10 Drawing
        let text10Rect = CGRect(x: 404, y: 220, width: 109, height: 202)
        let text10TextContent = "N"
        let text10Style = NSMutableParagraphStyle()
        text10Style.alignment = .center
        let text10FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: UserInterfaceDesign.discussionCategory, NSParagraphStyleAttributeName: text10Style]

        let text10TextHeight: CGFloat = text10TextContent.boundingRect(with: CGSize(width: text10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text10Rect)
        text10TextContent.draw(in: CGRect(x: text10Rect.minX, y: text10Rect.minY + (text10Rect.height - text10TextHeight) / 2, width: text10Rect.width, height: text10TextHeight), withAttributes: text10FontAttributes)
        context.restoreGState()




        if (pressed) {
            //// Group 2
            //// Picture 2 Drawing
            let picture2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 533, height: 533))
            context.saveGState()
            picture2Path.addClip()
            context.translateBy(x: 0, y: 0)
            context.scaleBy(x: 1, y: -1)
            context.translateBy(x: 0, y: -discussion.size.height)
            context.draw(discussion.cgImage!, in: CGRect(x: 0, y: 0, width: discussion.size.width, height: discussion.size.height))
            context.restoreGState()


            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 533, height: 533))
            UserInterfaceDesign.discussionCategoryOverlay.setFill()
            rectanglePath.fill()


            //// Group 3
            //// Text 11 Drawing
            let text11Rect = CGRect(x: 21, y: 111, width: 109, height: 202)
            let text11TextContent = "D"
            let text11Style = NSMutableParagraphStyle()
            text11Style.alignment = .center
            let text11FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text11Style]

            let text11TextHeight: CGFloat = text11TextContent.boundingRect(with: CGSize(width: text11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text11FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text11Rect)
            text11TextContent.draw(in: CGRect(x: text11Rect.minX, y: text11Rect.minY + (text11Rect.height - text11TextHeight) / 2, width: text11Rect.width, height: text11TextHeight), withAttributes: text11FontAttributes)
            context.restoreGState()


            //// Text 12 Drawing
            let text12Rect = CGRect(x: 85, y: 111, width: 109, height: 202)
            let text12TextContent = "I"
            let text12Style = NSMutableParagraphStyle()
            text12Style.alignment = .center
            let text12FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text12Style]

            let text12TextHeight: CGFloat = text12TextContent.boundingRect(with: CGSize(width: text12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text12FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text12Rect)
            text12TextContent.draw(in: CGRect(x: text12Rect.minX, y: text12Rect.minY + (text12Rect.height - text12TextHeight) / 2, width: text12Rect.width, height: text12TextHeight), withAttributes: text12FontAttributes)
            context.restoreGState()


            //// Text 13 Drawing
            let text13Rect = CGRect(x: 143, y: 111, width: 109, height: 202)
            let text13TextContent = "S"
            let text13Style = NSMutableParagraphStyle()
            text13Style.alignment = .center
            let text13FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text13Style]

            let text13TextHeight: CGFloat = text13TextContent.boundingRect(with: CGSize(width: text13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text13FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text13Rect)
            text13TextContent.draw(in: CGRect(x: text13Rect.minX, y: text13Rect.minY + (text13Rect.height - text13TextHeight) / 2, width: text13Rect.width, height: text13TextHeight), withAttributes: text13FontAttributes)
            context.restoreGState()


            //// Text 14 Drawing
            let text14Rect = CGRect(x: 230, y: 111, width: 109, height: 202)
            let text14TextContent = "C"
            let text14Style = NSMutableParagraphStyle()
            text14Style.alignment = .center
            let text14FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text14Style]

            let text14TextHeight: CGFloat = text14TextContent.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text14Rect)
            text14TextContent.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
            context.restoreGState()


            //// Text 15 Drawing
            let text15Rect = CGRect(x: 322, y: 111, width: 109, height: 202)
            let text15TextContent = "U"
            let text15Style = NSMutableParagraphStyle()
            text15Style.alignment = .center
            let text15FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text15Style]

            let text15TextHeight: CGFloat = text15TextContent.boundingRect(with: CGSize(width: text15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text15FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text15Rect)
            text15TextContent.draw(in: CGRect(x: text15Rect.minX, y: text15Rect.minY + (text15Rect.height - text15TextHeight) / 2, width: text15Rect.width, height: text15TextHeight), withAttributes: text15FontAttributes)
            context.restoreGState()


            //// Text 16 Drawing
            let text16Rect = CGRect(x: 404, y: 111, width: 109, height: 202)
            let text16TextContent = "S"
            let text16Style = NSMutableParagraphStyle()
            text16Style.alignment = .center
            let text16FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text16Style]

            let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text16Rect)
            text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
            context.restoreGState()


            //// Text 17 Drawing
            let text17Rect = CGRect(x: 21, y: 220, width: 109, height: 202)
            let text17TextContent = "S"
            let text17Style = NSMutableParagraphStyle()
            text17Style.alignment = .center
            let text17FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text17Style]

            let text17TextHeight: CGFloat = text17TextContent.boundingRect(with: CGSize(width: text17Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text17FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text17Rect)
            text17TextContent.draw(in: CGRect(x: text17Rect.minX, y: text17Rect.minY + (text17Rect.height - text17TextHeight) / 2, width: text17Rect.width, height: text17TextHeight), withAttributes: text17FontAttributes)
            context.restoreGState()


            //// Text 18 Drawing
            let text18Rect = CGRect(x: 136, y: 220, width: 109, height: 202)
            let text18TextContent = "I"
            let text18Style = NSMutableParagraphStyle()
            text18Style.alignment = .center
            let text18FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text18Style]

            let text18TextHeight: CGFloat = text18TextContent.boundingRect(with: CGSize(width: text18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text18FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text18Rect)
            text18TextContent.draw(in: CGRect(x: text18Rect.minX, y: text18Rect.minY + (text18Rect.height - text18TextHeight) / 2, width: text18Rect.width, height: text18TextHeight), withAttributes: text18FontAttributes)
            context.restoreGState()


            //// Text 19 Drawing
            let text19Rect = CGRect(x: 258, y: 220, width: 109, height: 202)
            let text19TextContent = "O"
            let text19Style = NSMutableParagraphStyle()
            text19Style.alignment = .center
            let text19FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text19Style]

            let text19TextHeight: CGFloat = text19TextContent.boundingRect(with: CGSize(width: text19Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text19FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text19Rect)
            text19TextContent.draw(in: CGRect(x: text19Rect.minX, y: text19Rect.minY + (text19Rect.height - text19TextHeight) / 2, width: text19Rect.width, height: text19TextHeight), withAttributes: text19FontAttributes)
            context.restoreGState()


            //// Text 20 Drawing
            let text20Rect = CGRect(x: 401, y: 220, width: 109, height: 202)
            let text20TextContent = "N"
            let text20Style = NSMutableParagraphStyle()
            text20Style.alignment = .center
            let text20FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 130), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text20Style]

            let text20TextHeight: CGFloat = text20TextContent.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text20Rect)
            text20TextContent.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
            context.restoreGState()




        }
        
        context.restoreGState()

    }

    public dynamic class func drawVacationCategory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 564, height: 564), resizing: ResizingBehavior = .aspectFit, pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 564, height: 564), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 564, y: resizedFrame.height / 564)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let vacation = UIImage(named: "vacation.jpg")!
        let vacationBlackAndWhite = UIImage(named: "vacationBlackAndWhite.jpg")!

        //// Picture Drawing
        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 564, height: 564))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -vacationBlackAndWhite.size.height)
        context.draw(vacationBlackAndWhite.cgImage!, in: CGRect(x: 0, y: 0, width: vacationBlackAndWhite.size.width, height: vacationBlackAndWhite.size.height))
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 31, y: 181, width: 502, height: 202)
        let text3TextContent = "VACATION"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 108), NSForegroundColorAttributeName: UserInterfaceDesign.vacationCategory, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        if (pressed) {
            //// Group
            //// Picture 2 Drawing
            let picture2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 564, height: 564))
            context.saveGState()
            picture2Path.addClip()
            context.translateBy(x: 0, y: 0)
            context.scaleBy(x: 1, y: -1)
            context.translateBy(x: 0, y: -vacation.size.height)
            context.draw(vacation.cgImage!, in: CGRect(x: 0, y: 0, width: vacation.size.width, height: vacation.size.height))
            context.restoreGState()


            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 564, height: 564))
            UserInterfaceDesign.vacationCategoryOverlay.setFill()
            rectanglePath.fill()


            //// Text Drawing
            let textRect = CGRect(x: 31, y: 181, width: 502, height: 202)
            let textTextContent = "VACATION"
            let textStyle = NSMutableParagraphStyle()
            textStyle.alignment = .left
            let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 108), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: textStyle]

            let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: textRect)
            textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
            context.restoreGState()


        }
        
        context.restoreGState()

    }

    public dynamic class func drawArtCategory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 768, height: 768), resizing: ResizingBehavior = .aspectFit, pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 768, height: 768), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 768, y: resizedFrame.height / 768)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let artBlackAndWhite = UIImage(named: "artBlackAndWhite.jpg")!
        let art = UIImage(named: "art.jpg")!

        //// Picture Drawing
        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 768, height: 768))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -artBlackAndWhite.size.height)
        context.draw(artBlackAndWhite.cgImage!, in: CGRect(x: 0, y: 0, width: artBlackAndWhite.size.width, height: artBlackAndWhite.size.height))
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 50, y: 223, width: 669, height: 322)
        let text2TextContent = "ART"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 250), NSForegroundColorAttributeName: UserInterfaceDesign.artCategory, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        if (pressed) {
            //// Group
            //// Picture 2 Drawing
            let picture2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 768, height: 768))
            context.saveGState()
            picture2Path.addClip()
            context.translateBy(x: 0, y: 0)
            context.scaleBy(x: 1, y: -1)
            context.translateBy(x: 0, y: -art.size.height)
            context.draw(art.cgImage!, in: CGRect(x: 0, y: 0, width: art.size.width, height: art.size.height))
            context.restoreGState()


            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 768, height: 768))
            UserInterfaceDesign.artCategoryOverlay.setFill()
            rectanglePath.fill()


            //// Text Drawing
            let textRect = CGRect(x: 50, y: 223, width: 669, height: 322)
            let textTextContent = "ART"
            let textStyle = NSMutableParagraphStyle()
            textStyle.alignment = .center
            let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 250), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: textStyle]

            let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: textRect)
            textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
            context.restoreGState()


        }
        
        context.restoreGState()

    }

    public dynamic class func drawCustomTextField(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 349, height: 40), resizing: ResizingBehavior = .aspectFit, pressed: Bool = true, textFieldText: String = "Default") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 349, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 349, y: resizedFrame.height / 40)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let grey = UIColor(red: 0.734, green: 0.731, blue: 0.731, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -0.5, y: 36.5))
        bezierPath.addLine(to: CGPoint(x: 349.5, y: 36.5))
        grey.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 0, y: 15, width: 105, height: 15)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 16), NSForegroundColorAttributeName: grey, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textFieldText.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textFieldText.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        if (pressed) {
            //// Group
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 15, width: 347, height: 24))
            white.setFill()
            rectanglePath.fill()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: -0.5, y: 36.5))
            bezier2Path.addLine(to: CGPoint(x: 349.5, y: 36.5))
            grey.setStroke()
            bezier2Path.lineWidth = 3
            bezier2Path.stroke()


            //// Text 2 Drawing
            let text2Rect = CGRect(x: 0, y: 0, width: 105, height: 15)
            let text2Style = NSMutableParagraphStyle()
            text2Style.alignment = .left
            let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSForegroundColorAttributeName: grey, NSParagraphStyleAttributeName: text2Style]

            let text2TextHeight: CGFloat = textFieldText.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text2Rect)
            textFieldText.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
            context.restoreGState()


        }
        
        context.restoreGState()

    }

    public dynamic class func drawMyEvents(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 50), resizing: ResizingBehavior = .aspectFit, pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 50)


        //// Color Declarations
        let gradientColor = UIColor(red: 0.928, green: 0.872, blue: 0.246, alpha: 0.911)
        let color2 = UIColor(red: 0.956, green: 0.205, blue: 0.000, alpha: 0.777)
        let grey = UIColor(red: 0.734, green: 0.731, blue: 0.731, alpha: 1.000)
        let fillColor5 = UIColor(red: 0.886, green: 0.106, blue: 0.106, alpha: 1.000)
        let fillColor7 = UIColor(red: 0.800, green: 0.800, blue: 0.800, alpha: 1.000)
        let fillColor8 = UIColor(red: 0.102, green: 0.090, blue: 0.094, alpha: 1.000)
        let fillColor9 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Text Drawing
        let textRect = CGRect(x: 63, y: 38, width: 54, height: 8)
        let textTextContent = "My Events"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 7), NSForegroundColorAttributeName: grey, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// myEvents.svg Group 2
        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 73.25, y: 10.74, width: 34.5, height: 27.26))
        grey.setFill()
        rectangle5Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 105.54, y: 35.89))
        bezier3Path.addLine(to: CGPoint(x: 75.46, y: 35.89))
        bezier3Path.addLine(to: CGPoint(x: 75.46, y: 13.7))
        bezier3Path.addLine(to: CGPoint(x: 105.54, y: 13.7))
        bezier3Path.addLine(to: CGPoint(x: 105.54, y: 35.89))
        bezier3Path.addLine(to: CGPoint(x: 105.54, y: 35.89))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 76.04, y: 35.35))
        bezier3Path.addLine(to: CGPoint(x: 104.96, y: 35.35))
        bezier3Path.addLine(to: CGPoint(x: 104.96, y: 14.25))
        bezier3Path.addLine(to: CGPoint(x: 76.04, y: 14.25))
        bezier3Path.addLine(to: CGPoint(x: 76.04, y: 35.35))
        bezier3Path.close()
        grey.setFill()
        bezier3Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 73.25, y: 6.32, width: 34.5, height: 6.42))
        fillColor7.setFill()
        rectangle6Path.fill()


        //// Group
        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 79.2, y: 3, width: 2, height: 5.15))
        grey.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 99.81, y: 3, width: 2, height: 5.15))
        grey.setFill()
        rectangle8Path.fill()




        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 95.26, y: 31.8))
        bezier4Path.addLine(to: CGPoint(x: 90.5, y: 28.38))
        bezier4Path.addLine(to: CGPoint(x: 85.74, y: 31.8))
        bezier4Path.addLine(to: CGPoint(x: 87.56, y: 26.27))
        bezier4Path.addLine(to: CGPoint(x: 82.82, y: 22.87))
        bezier4Path.addLine(to: CGPoint(x: 88.68, y: 22.87))
        bezier4Path.addLine(to: CGPoint(x: 90.5, y: 17.33))
        bezier4Path.addLine(to: CGPoint(x: 92.32, y: 22.87))
        bezier4Path.addLine(to: CGPoint(x: 98.18, y: 22.87))
        bezier4Path.addLine(to: CGPoint(x: 93.44, y: 26.27))
        bezier4Path.addLine(to: CGPoint(x: 95.26, y: 31.8))
        bezier4Path.close()
        fillColor9.setFill()
        bezier4Path.fill()




        if (pressed) {
            //// myEvents.svg Group
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 73.25, y: 10.74, width: 34.5, height: 27.26))
            fillColor7.setFill()
            rectanglePath.fill()


            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 105.54, y: 35.89))
            bezierPath.addLine(to: CGPoint(x: 75.46, y: 35.89))
            bezierPath.addLine(to: CGPoint(x: 75.46, y: 13.7))
            bezierPath.addLine(to: CGPoint(x: 105.54, y: 13.7))
            bezierPath.addLine(to: CGPoint(x: 105.54, y: 35.89))
            bezierPath.addLine(to: CGPoint(x: 105.54, y: 35.89))
            bezierPath.close()
            bezierPath.move(to: CGPoint(x: 76.04, y: 35.35))
            bezierPath.addLine(to: CGPoint(x: 104.96, y: 35.35))
            bezierPath.addLine(to: CGPoint(x: 104.96, y: 14.25))
            bezierPath.addLine(to: CGPoint(x: 76.04, y: 14.25))
            bezierPath.addLine(to: CGPoint(x: 76.04, y: 35.35))
            bezierPath.close()
            gradientColor.setFill()
            bezierPath.fill()


            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(rect: CGRect(x: 73.25, y: 6.32, width: 34.5, height: 6.42))
            color2.setFill()
            rectangle2Path.fill()


            //// Group 2
            //// Rectangle 3 Drawing
            let rectangle3Path = UIBezierPath(rect: CGRect(x: 79.2, y: 3, width: 2, height: 5.15))
            fillColor8.setFill()
            rectangle3Path.fill()


            //// Rectangle 4 Drawing
            let rectangle4Path = UIBezierPath(rect: CGRect(x: 99.81, y: 3, width: 2, height: 5.15))
            fillColor8.setFill()
            rectangle4Path.fill()




            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 95.26, y: 31.8))
            bezier2Path.addLine(to: CGPoint(x: 90.5, y: 28.38))
            bezier2Path.addLine(to: CGPoint(x: 85.74, y: 31.8))
            bezier2Path.addLine(to: CGPoint(x: 87.56, y: 26.27))
            bezier2Path.addLine(to: CGPoint(x: 82.82, y: 22.87))
            bezier2Path.addLine(to: CGPoint(x: 88.68, y: 22.87))
            bezier2Path.addLine(to: CGPoint(x: 90.5, y: 17.33))
            bezier2Path.addLine(to: CGPoint(x: 92.32, y: 22.87))
            bezier2Path.addLine(to: CGPoint(x: 98.18, y: 22.87))
            bezier2Path.addLine(to: CGPoint(x: 93.44, y: 26.27))
            bezier2Path.addLine(to: CGPoint(x: 95.26, y: 31.8))
            bezier2Path.close()
            fillColor5.setFill()
            bezier2Path.fill()


        }
        
        context.restoreGState()

    }

    public dynamic class func drawEvents(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 50), resizing: ResizingBehavior = .aspectFit, pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 50)


        //// Color Declarations
        let grey = UIColor(red: 0.734, green: 0.731, blue: 0.731, alpha: 1.000)
        let fillColor9 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor10 = UIColor(red: 0.847, green: 0.863, blue: 0.882, alpha: 1.000)
        let fillColor11 = UIColor(red: 1.000, green: 0.310, blue: 0.098, alpha: 1.000)
        let fillColor12 = UIColor(red: 0.361, green: 0.329, blue: 0.416, alpha: 1.000)
        let fillColor13 = UIColor(red: 1.000, green: 0.824, blue: 0.000, alpha: 1.000)
        let fillColor14 = UIColor(red: 1.000, green: 0.588, blue: 0.000, alpha: 1.000)

        //// Text 2 Drawing
        let text2Rect = CGRect(x: 64, y: 38, width: 54, height: 8)
        let text2TextContent = "Events"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 7), NSForegroundColorAttributeName: grey, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// events.svg Group 2
        //// Group
        //// Group 28
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 74, y: 12))
        bezier3Path.addLine(to: CGPoint(x: 74, y: 35.17))
        bezier3Path.addCurve(to: CGPoint(x: 76.73, y: 38), controlPoint1: CGPoint(x: 74, y: 36.73), controlPoint2: CGPoint(x: 75.23, y: 38))
        bezier3Path.addLine(to: CGPoint(x: 106.27, y: 38))
        bezier3Path.addCurve(to: CGPoint(x: 109, y: 35.17), controlPoint1: CGPoint(x: 107.77, y: 38), controlPoint2: CGPoint(x: 109, y: 36.73))
        bezier3Path.addLine(to: CGPoint(x: 109, y: 12))
        bezier3Path.addLine(to: CGPoint(x: 74, y: 12))
        bezier3Path.close()
        fillColor10.setFill()
        bezier3Path.fill()




        //// Group 29
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 106.27, y: 4))
        bezier4Path.addLine(to: CGPoint(x: 76.73, y: 4))
        bezier4Path.addCurve(to: CGPoint(x: 74, y: 6.86), controlPoint1: CGPoint(x: 75.23, y: 4), controlPoint2: CGPoint(x: 74, y: 5.28))
        bezier4Path.addLine(to: CGPoint(x: 74, y: 12))
        bezier4Path.addLine(to: CGPoint(x: 109, y: 12))
        bezier4Path.addLine(to: CGPoint(x: 109, y: 6.86))
        bezier4Path.addCurve(to: CGPoint(x: 106.27, y: 4), controlPoint1: CGPoint(x: 109, y: 5.28), controlPoint2: CGPoint(x: 107.77, y: 4))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 78.38, y: 9.71))
        bezier4Path.addCurve(to: CGPoint(x: 76.73, y: 8), controlPoint1: CGPoint(x: 77.47, y: 9.71), controlPoint2: CGPoint(x: 76.73, y: 8.95))
        bezier4Path.addCurve(to: CGPoint(x: 78.38, y: 6.29), controlPoint1: CGPoint(x: 76.73, y: 7.05), controlPoint2: CGPoint(x: 77.47, y: 6.29))
        bezier4Path.addCurve(to: CGPoint(x: 80.02, y: 8), controlPoint1: CGPoint(x: 79.28, y: 6.29), controlPoint2: CGPoint(x: 80.02, y: 7.05))
        bezier4Path.addCurve(to: CGPoint(x: 78.38, y: 9.71), controlPoint1: CGPoint(x: 80.02, y: 8.95), controlPoint2: CGPoint(x: 79.28, y: 9.71))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 104.62, y: 9.71))
        bezier4Path.addCurve(to: CGPoint(x: 102.98, y: 8), controlPoint1: CGPoint(x: 103.72, y: 9.71), controlPoint2: CGPoint(x: 102.98, y: 8.95))
        bezier4Path.addCurve(to: CGPoint(x: 104.62, y: 6.29), controlPoint1: CGPoint(x: 102.98, y: 7.05), controlPoint2: CGPoint(x: 103.72, y: 6.29))
        bezier4Path.addCurve(to: CGPoint(x: 106.27, y: 8), controlPoint1: CGPoint(x: 105.53, y: 6.29), controlPoint2: CGPoint(x: 106.27, y: 7.05))
        bezier4Path.addCurve(to: CGPoint(x: 104.62, y: 9.71), controlPoint1: CGPoint(x: 106.27, y: 8.95), controlPoint2: CGPoint(x: 105.53, y: 9.71))
        bezier4Path.close()
        grey.setFill()
        bezier4Path.fill()




        //// Group 30
        //// Group 31
        //// Oval 19 Drawing
        let oval19Path = UIBezierPath(ovalIn: CGRect(x: 89, y: 17, width: 5, height: 5))
        fillColor9.setFill()
        oval19Path.fill()




        //// Group 32
        //// Oval 20 Drawing
        let oval20Path = UIBezierPath(ovalIn: CGRect(x: 84, y: 17, width: 4, height: 5))
        fillColor9.setFill()
        oval20Path.fill()




        //// Group 33
        //// Oval 21 Drawing
        let oval21Path = UIBezierPath(ovalIn: CGRect(x: 78, y: 17, width: 5, height: 5))
        fillColor9.setFill()
        oval21Path.fill()




        //// Group 34
        //// Oval 22 Drawing
        let oval22Path = UIBezierPath(ovalIn: CGRect(x: 95, y: 17, width: 4, height: 5))
        fillColor9.setFill()
        oval22Path.fill()




        //// Group 35
        //// Oval 23 Drawing
        let oval23Path = UIBezierPath(ovalIn: CGRect(x: 101, y: 17, width: 4, height: 5))
        fillColor9.setFill()
        oval23Path.fill()




        //// Group 36
        //// Oval 24 Drawing
        let oval24Path = UIBezierPath(ovalIn: CGRect(x: 89, y: 23, width: 5, height: 4))
        fillColor9.setFill()
        oval24Path.fill()




        //// Group 37
        //// Oval 25 Drawing
        let oval25Path = UIBezierPath(ovalIn: CGRect(x: 84, y: 23, width: 4, height: 4))
        fillColor9.setFill()
        oval25Path.fill()




        //// Group 38
        //// Oval 26 Drawing
        let oval26Path = UIBezierPath(ovalIn: CGRect(x: 78, y: 23, width: 5, height: 4))
        fillColor9.setFill()
        oval26Path.fill()




        //// Group 39
        //// Oval 27 Drawing
        let oval27Path = UIBezierPath(ovalIn: CGRect(x: 95, y: 23, width: 4, height: 4))
        fillColor9.setFill()
        oval27Path.fill()




        //// Group 40
        //// Oval 28 Drawing
        let oval28Path = UIBezierPath(ovalIn: CGRect(x: 101, y: 23, width: 4, height: 4))
        fillColor9.setFill()
        oval28Path.fill()




        //// Group 41
        //// Oval 29 Drawing
        let oval29Path = UIBezierPath(ovalIn: CGRect(x: 89, y: 28, width: 5, height: 5))
        fillColor9.setFill()
        oval29Path.fill()




        //// Group 42
        //// Oval 30 Drawing
        let oval30Path = UIBezierPath(ovalIn: CGRect(x: 84, y: 28, width: 4, height: 5))
        fillColor9.setFill()
        oval30Path.fill()




        //// Group 43
        //// Oval 31 Drawing
        let oval31Path = UIBezierPath(ovalIn: CGRect(x: 78, y: 28, width: 5, height: 5))
        fillColor9.setFill()
        oval31Path.fill()




        //// Group 44
        //// Oval 32 Drawing
        let oval32Path = UIBezierPath(ovalIn: CGRect(x: 95, y: 28, width: 4, height: 5))
        fillColor9.setFill()
        oval32Path.fill()




        //// Group 45
        //// Oval 33 Drawing
        let oval33Path = UIBezierPath(ovalIn: CGRect(x: 101, y: 28, width: 4, height: 5))
        fillColor9.setFill()
        oval33Path.fill()






        //// Group 46
        //// Group 47
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 78, y: 3, width: 1, height: 6), cornerRadius: 0.5)
        grey.setFill()
        rectangle3Path.fill()






        //// Group 48
        //// Group 49
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 104, y: 3, width: 1, height: 6), cornerRadius: 0.5)
        grey.setFill()
        rectangle4Path.fill()






        //// Group 50
        //// Oval 34 Drawing
        let oval34Path = UIBezierPath(ovalIn: CGRect(x: 78, y: 17, width: 5, height: 4))
        grey.setFill()
        oval34Path.fill()




        //// Group 51
        //// Oval 35 Drawing
        let oval35Path = UIBezierPath(ovalIn: CGRect(x: 89, y: 28, width: 5, height: 5))
        grey.setFill()
        oval35Path.fill()




        //// Group 52
        //// Oval 36 Drawing
        let oval36Path = UIBezierPath(ovalIn: CGRect(x: 95, y: 23, width: 4, height: 4))
        grey.setFill()
        oval36Path.fill()








        if (pressed) {
            //// events.svg Group
            //// Group 2
            //// Group 3
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 74, y: 12))
            bezierPath.addLine(to: CGPoint(x: 74, y: 35.17))
            bezierPath.addCurve(to: CGPoint(x: 76.73, y: 38), controlPoint1: CGPoint(x: 74, y: 36.73), controlPoint2: CGPoint(x: 75.23, y: 38))
            bezierPath.addLine(to: CGPoint(x: 106.27, y: 38))
            bezierPath.addCurve(to: CGPoint(x: 109, y: 35.17), controlPoint1: CGPoint(x: 107.77, y: 38), controlPoint2: CGPoint(x: 109, y: 36.73))
            bezierPath.addLine(to: CGPoint(x: 109, y: 12))
            bezierPath.addLine(to: CGPoint(x: 74, y: 12))
            bezierPath.close()
            fillColor10.setFill()
            bezierPath.fill()




            //// Group 4
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 106.27, y: 4))
            bezier2Path.addLine(to: CGPoint(x: 76.73, y: 4))
            bezier2Path.addCurve(to: CGPoint(x: 74, y: 6.86), controlPoint1: CGPoint(x: 75.23, y: 4), controlPoint2: CGPoint(x: 74, y: 5.28))
            bezier2Path.addLine(to: CGPoint(x: 74, y: 12))
            bezier2Path.addLine(to: CGPoint(x: 109, y: 12))
            bezier2Path.addLine(to: CGPoint(x: 109, y: 6.86))
            bezier2Path.addCurve(to: CGPoint(x: 106.27, y: 4), controlPoint1: CGPoint(x: 109, y: 5.28), controlPoint2: CGPoint(x: 107.77, y: 4))
            bezier2Path.close()
            bezier2Path.move(to: CGPoint(x: 78.38, y: 9.71))
            bezier2Path.addCurve(to: CGPoint(x: 76.73, y: 8), controlPoint1: CGPoint(x: 77.47, y: 9.71), controlPoint2: CGPoint(x: 76.73, y: 8.95))
            bezier2Path.addCurve(to: CGPoint(x: 78.38, y: 6.29), controlPoint1: CGPoint(x: 76.73, y: 7.05), controlPoint2: CGPoint(x: 77.47, y: 6.29))
            bezier2Path.addCurve(to: CGPoint(x: 80.02, y: 8), controlPoint1: CGPoint(x: 79.28, y: 6.29), controlPoint2: CGPoint(x: 80.02, y: 7.05))
            bezier2Path.addCurve(to: CGPoint(x: 78.38, y: 9.71), controlPoint1: CGPoint(x: 80.02, y: 8.95), controlPoint2: CGPoint(x: 79.28, y: 9.71))
            bezier2Path.close()
            bezier2Path.move(to: CGPoint(x: 104.62, y: 9.71))
            bezier2Path.addCurve(to: CGPoint(x: 102.98, y: 8), controlPoint1: CGPoint(x: 103.72, y: 9.71), controlPoint2: CGPoint(x: 102.98, y: 8.95))
            bezier2Path.addCurve(to: CGPoint(x: 104.62, y: 6.29), controlPoint1: CGPoint(x: 102.98, y: 7.05), controlPoint2: CGPoint(x: 103.72, y: 6.29))
            bezier2Path.addCurve(to: CGPoint(x: 106.27, y: 8), controlPoint1: CGPoint(x: 105.53, y: 6.29), controlPoint2: CGPoint(x: 106.27, y: 7.05))
            bezier2Path.addCurve(to: CGPoint(x: 104.62, y: 9.71), controlPoint1: CGPoint(x: 106.27, y: 8.95), controlPoint2: CGPoint(x: 105.53, y: 9.71))
            bezier2Path.close()
            fillColor11.setFill()
            bezier2Path.fill()




            //// Group 5
            //// Group 6
            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 89, y: 17, width: 5, height: 5))
            fillColor9.setFill()
            ovalPath.fill()




            //// Group 7
            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 84, y: 17, width: 4, height: 5))
            fillColor9.setFill()
            oval2Path.fill()




            //// Group 8
            //// Oval 3 Drawing
            let oval3Path = UIBezierPath(ovalIn: CGRect(x: 78, y: 17, width: 5, height: 5))
            fillColor9.setFill()
            oval3Path.fill()




            //// Group 9
            //// Oval 4 Drawing
            let oval4Path = UIBezierPath(ovalIn: CGRect(x: 95, y: 17, width: 4, height: 5))
            fillColor9.setFill()
            oval4Path.fill()




            //// Group 10
            //// Oval 5 Drawing
            let oval5Path = UIBezierPath(ovalIn: CGRect(x: 101, y: 17, width: 4, height: 5))
            fillColor9.setFill()
            oval5Path.fill()




            //// Group 11
            //// Oval 6 Drawing
            let oval6Path = UIBezierPath(ovalIn: CGRect(x: 89, y: 23, width: 5, height: 4))
            fillColor9.setFill()
            oval6Path.fill()




            //// Group 12
            //// Oval 7 Drawing
            let oval7Path = UIBezierPath(ovalIn: CGRect(x: 84, y: 23, width: 4, height: 4))
            fillColor9.setFill()
            oval7Path.fill()




            //// Group 13
            //// Oval 8 Drawing
            let oval8Path = UIBezierPath(ovalIn: CGRect(x: 78, y: 23, width: 5, height: 4))
            fillColor9.setFill()
            oval8Path.fill()




            //// Group 14
            //// Oval 9 Drawing
            let oval9Path = UIBezierPath(ovalIn: CGRect(x: 95, y: 23, width: 4, height: 4))
            fillColor9.setFill()
            oval9Path.fill()




            //// Group 15
            //// Oval 10 Drawing
            let oval10Path = UIBezierPath(ovalIn: CGRect(x: 101, y: 23, width: 4, height: 4))
            fillColor9.setFill()
            oval10Path.fill()




            //// Group 16
            //// Oval 11 Drawing
            let oval11Path = UIBezierPath(ovalIn: CGRect(x: 89, y: 28, width: 5, height: 5))
            fillColor9.setFill()
            oval11Path.fill()




            //// Group 17
            //// Oval 12 Drawing
            let oval12Path = UIBezierPath(ovalIn: CGRect(x: 84, y: 28, width: 4, height: 5))
            fillColor9.setFill()
            oval12Path.fill()




            //// Group 18
            //// Oval 13 Drawing
            let oval13Path = UIBezierPath(ovalIn: CGRect(x: 78, y: 28, width: 5, height: 5))
            fillColor9.setFill()
            oval13Path.fill()




            //// Group 19
            //// Oval 14 Drawing
            let oval14Path = UIBezierPath(ovalIn: CGRect(x: 95, y: 28, width: 4, height: 5))
            fillColor9.setFill()
            oval14Path.fill()




            //// Group 20
            //// Oval 15 Drawing
            let oval15Path = UIBezierPath(ovalIn: CGRect(x: 101, y: 28, width: 4, height: 5))
            fillColor9.setFill()
            oval15Path.fill()






            //// Group 21
            //// Group 22
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 78, y: 3, width: 1, height: 6), cornerRadius: 0.5)
            fillColor12.setFill()
            rectanglePath.fill()






            //// Group 23
            //// Group 24
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 104, y: 3, width: 1, height: 6), cornerRadius: 0.5)
            fillColor12.setFill()
            rectangle2Path.fill()






            //// Group 25
            //// Oval 16 Drawing
            let oval16Path = UIBezierPath(ovalIn: CGRect(x: 78, y: 17, width: 5, height: 4))
            fillColor13.setFill()
            oval16Path.fill()




            //// Group 26
            //// Oval 17 Drawing
            let oval17Path = UIBezierPath(ovalIn: CGRect(x: 89, y: 28, width: 5, height: 5))
            fillColor14.setFill()
            oval17Path.fill()




            //// Group 27
            //// Oval 18 Drawing
            let oval18Path = UIBezierPath(ovalIn: CGRect(x: 95, y: 23, width: 4, height: 4))
            fillColor11.setFill()
            oval18Path.fill()






        }
        
        context.restoreGState()

    }

    public dynamic class func drawSportCategoryInSliderMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 563, height: 419), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 563, height: 419), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 563, y: resizedFrame.height / 419)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: -3, width: 563, height: 422.25))
        UserInterfaceDesign.sportCategoryOverlay.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 31, y: -3, width: 502, height: 157)
        let textTextContent = "SPORT"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 135), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawEntertainmentCategoryInSliderMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 768, height: 576), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 768, height: 576), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 768, y: resizedFrame.height / 576)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 768, height: 576))
        UserInterfaceDesign.entertainmentCategoryOverlay.setFill()
        rectangle2Path.fill()


        //// Group 4
        //// Group 3
        //// Text Drawing
        let textRect = CGRect(x: 45, y: 0, width: 157, height: 198)
        let textTextContent = "E"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 565, y: 0, width: 157, height: 198)
        let text2TextContent = "R"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 180, y: 0, width: 149, height: 198)
        let text4TextContent = "N"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text4Style]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 324, y: 0, width: 149, height: 198)
        let text5TextContent = "T"
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text5Style]

        let text5TextHeight: CGFloat = text5TextContent.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        text5TextContent.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: 448, y: 0, width: 149, height: 198)
        let text6TextContent = "E"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text6Style]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()




        //// Group 2
        //// Text 7 Drawing
        let text7Rect = CGRect(x: 45, y: 120, width: 175, height: 197)
        let text7TextContent = "T"
        let text7Style = NSMutableParagraphStyle()
        text7Style.alignment = .center
        let text7FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text7Style]

        let text7TextHeight: CGFloat = text7TextContent.boundingRect(with: CGSize(width: text7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text7Rect)
        text7TextContent.draw(in: CGRect(x: text7Rect.minX, y: text7Rect.minY + (text7Rect.height - text7TextHeight) / 2, width: text7Rect.width, height: text7TextHeight), withAttributes: text7FontAttributes)
        context.restoreGState()


        //// Text 8 Drawing
        let text8Rect = CGRect(x: 231, y: 120, width: 157, height: 197)
        let text8TextContent = "A"
        let text8Style = NSMutableParagraphStyle()
        text8Style.alignment = .center
        let text8FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text8Style]

        let text8TextHeight: CGFloat = text8TextContent.boundingRect(with: CGSize(width: text8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text8Rect)
        text8TextContent.draw(in: CGRect(x: text8Rect.minX, y: text8Rect.minY + (text8Rect.height - text8TextHeight) / 2, width: text8Rect.width, height: text8TextHeight), withAttributes: text8FontAttributes)
        context.restoreGState()


        //// Text 9 Drawing
        let text9Rect = CGRect(x: 395, y: 120, width: 157, height: 197)
        let text9TextContent = "I"
        let text9Style = NSMutableParagraphStyle()
        text9Style.alignment = .center
        let text9FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text9Style]

        let text9TextHeight: CGFloat = text9TextContent.boundingRect(with: CGSize(width: text9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text9Rect)
        text9TextContent.draw(in: CGRect(x: text9Rect.minX, y: text9Rect.minY + (text9Rect.height - text9TextHeight) / 2, width: text9Rect.width, height: text9TextHeight), withAttributes: text9FontAttributes)
        context.restoreGState()


        //// Text 10 Drawing
        let text10Rect = CGRect(x: 565, y: 120, width: 157, height: 197)
        let text10TextContent = "N"
        let text10Style = NSMutableParagraphStyle()
        text10Style.alignment = .center
        let text10FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text10Style]

        let text10TextHeight: CGFloat = text10TextContent.boundingRect(with: CGSize(width: text10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text10Rect)
        text10TextContent.draw(in: CGRect(x: text10Rect.minX, y: text10Rect.minY + (text10Rect.height - text10TextHeight) / 2, width: text10Rect.width, height: text10TextHeight), withAttributes: text10FontAttributes)
        context.restoreGState()




        //// Group
        //// Text 3 Drawing
        let text3Rect = CGRect(x: 64, y: 238, width: 175, height: 198)
        let text3TextContent = "M"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 11 Drawing
        let text11Rect = CGRect(x: 239, y: 238, width: 157, height: 198)
        let text11TextContent = "E"
        let text11Style = NSMutableParagraphStyle()
        text11Style.alignment = .center
        let text11FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text11Style]

        let text11TextHeight: CGFloat = text11TextContent.boundingRect(with: CGSize(width: text11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text11Rect)
        text11TextContent.draw(in: CGRect(x: text11Rect.minX, y: text11Rect.minY + (text11Rect.height - text11TextHeight) / 2, width: text11Rect.width, height: text11TextHeight), withAttributes: text11FontAttributes)
        context.restoreGState()


        //// Text 12 Drawing
        let text12Rect = CGRect(x: 402, y: 238, width: 157, height: 198)
        let text12TextContent = "N"
        let text12Style = NSMutableParagraphStyle()
        text12Style.alignment = .center
        let text12FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text12Style]

        let text12TextHeight: CGFloat = text12TextContent.boundingRect(with: CGSize(width: text12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text12Rect)
        text12TextContent.draw(in: CGRect(x: text12Rect.minX, y: text12Rect.minY + (text12Rect.height - text12TextHeight) / 2, width: text12Rect.width, height: text12TextHeight), withAttributes: text12FontAttributes)
        context.restoreGState()


        //// Text 13 Drawing
        let text13Rect = CGRect(x: 567, y: 238, width: 157, height: 198)
        let text13TextContent = "T"
        let text13Style = NSMutableParagraphStyle()
        text13Style.alignment = .center
        let text13FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 160), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text13Style]

        let text13TextHeight: CGFloat = text13TextContent.boundingRect(with: CGSize(width: text13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text13Rect)
        text13TextContent.draw(in: CGRect(x: text13Rect.minX, y: text13Rect.minY + (text13Rect.height - text13TextHeight) / 2, width: text13Rect.width, height: text13TextHeight), withAttributes: text13FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawVacationCategoryInSliderMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 564, height: 423), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 564, height: 423), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 564, y: resizedFrame.height / 423)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 2, y: 1, width: 563, height: 423))
        UserInterfaceDesign.vacationCategoryOverlay.setFill()
        rectangle2Path.fill()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 33, y: -22, width: 502, height: 202)
        let text3TextContent = "VACATION"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 108), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawArtCategoryInSliderMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 768, height: 576), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 768, height: 576), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 768, y: resizedFrame.height / 576)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 768, height: 576))
        UserInterfaceDesign.artCategoryOverlay.setFill()
        rectanglePath.fill()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 50, y: -26, width: 669, height: 264)
        let text2TextContent = "ART"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 200), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFoodCategoryInSliderMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 800, height: 600), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 800, height: 600), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 800, y: resizedFrame.height / 600)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 800, height: 600))
        UserInterfaceDesign.foodCategoryOverlay.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 66, y: -17, width: 669, height: 263)
        let textTextContent = "FOOD"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 202), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawDiscussionCategoryInSliderMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 533, height: 415), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 533, height: 415), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 533, y: resizedFrame.height / 415)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 533, height: 414.75))
        UserInterfaceDesign.discussionCategoryOverlay.setFill()
        rectanglePath.fill()


        //// Group
        //// Text 3 Drawing
        let text3Rect = CGRect(x: 21, y: 0, width: 109, height: 134)
        let text3TextContent = "D"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 100), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 85, y: 0, width: 109, height: 134)
        let textTextContent = "I"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 100), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 143, y: 0, width: 109, height: 134)
        let text2TextContent = "S"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 100), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 230, y: 0, width: 109, height: 134)
        let text4TextContent = "C"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 100), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text4Style]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 322, y: 0, width: 109, height: 134)
        let text5TextContent = "U"
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 100), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text5Style]

        let text5TextHeight: CGFloat = text5TextContent.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        text5TextContent.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: 404, y: 0, width: 109, height: 134)
        let text6TextContent = "S"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 100), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text6Style]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Text 7 Drawing
        let text7Rect = CGRect(x: 21, y: 74, width: 109, height: 134)
        let text7TextContent = "S"
        let text7Style = NSMutableParagraphStyle()
        text7Style.alignment = .center
        let text7FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 100), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text7Style]

        let text7TextHeight: CGFloat = text7TextContent.boundingRect(with: CGSize(width: text7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text7Rect)
        text7TextContent.draw(in: CGRect(x: text7Rect.minX, y: text7Rect.minY + (text7Rect.height - text7TextHeight) / 2, width: text7Rect.width, height: text7TextHeight), withAttributes: text7FontAttributes)
        context.restoreGState()


        //// Text 8 Drawing
        let text8Rect = CGRect(x: 139, y: 74, width: 109, height: 134)
        let text8TextContent = "I"
        let text8Style = NSMutableParagraphStyle()
        text8Style.alignment = .center
        let text8FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 100), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text8Style]

        let text8TextHeight: CGFloat = text8TextContent.boundingRect(with: CGSize(width: text8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text8Rect)
        text8TextContent.draw(in: CGRect(x: text8Rect.minX, y: text8Rect.minY + (text8Rect.height - text8TextHeight) / 2, width: text8Rect.width, height: text8TextHeight), withAttributes: text8FontAttributes)
        context.restoreGState()


        //// Text 9 Drawing
        let text9Rect = CGRect(x: 261, y: 74, width: 109, height: 134)
        let text9TextContent = "O"
        let text9Style = NSMutableParagraphStyle()
        text9Style.alignment = .center
        let text9FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 100), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text9Style]

        let text9TextHeight: CGFloat = text9TextContent.boundingRect(with: CGSize(width: text9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text9Rect)
        text9TextContent.draw(in: CGRect(x: text9Rect.minX, y: text9Rect.minY + (text9Rect.height - text9TextHeight) / 2, width: text9Rect.width, height: text9TextHeight), withAttributes: text9FontAttributes)
        context.restoreGState()


        //// Text 10 Drawing
        let text10Rect = CGRect(x: 404, y: 74, width: 109, height: 134)
        let text10TextContent = "N"
        let text10Style = NSMutableParagraphStyle()
        text10Style.alignment = .center
        let text10FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 100), NSForegroundColorAttributeName: white, NSParagraphStyleAttributeName: text10Style]

        let text10TextHeight: CGFloat = text10TextContent.boundingRect(with: CGSize(width: text10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text10Rect)
        text10TextContent.draw(in: CGRect(x: text10Rect.minX, y: text10Rect.minY + (text10Rect.height - text10TextHeight) / 2, width: text10Rect.width, height: text10TextHeight), withAttributes: text10FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawSliderMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 202, height: 513), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 202, height: 513), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 202, y: resizedFrame.height / 513)


        //// Color Declarations
        let color4 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.706)
        let color5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.392)

        //// Image Declarations
        let slideMenu = UIImage(named: "slideMenu.jpg")!

        //// Picture Drawing
        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 203, height: 513))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -slideMenu.size.height)
        context.draw(slideMenu.cgImage!, in: CGRect(x: 0, y: 0, width: slideMenu.size.width, height: slideMenu.size.height))
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 203, height: 519))
        color4.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0.5, y: -0.5, width: 202, height: 156))
        color5.setFill()
        rectangle2Path.fill()
        color5.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawTheCount(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 480, height: 630), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 480, height: 630), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 480, y: resizedFrame.height / 630)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 240, height: 210)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        UserInterfaceDesign.drawFoodCategoryInSliderMenu(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 240, y: 0, width: 240, height: 210)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        UserInterfaceDesign.drawSportCategoryInSliderMenu(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 0, y: 210, width: 240, height: 210)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        UserInterfaceDesign.drawEntertainmentCategoryInSliderMenu(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 240, y: 210, width: 240, height: 210)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        UserInterfaceDesign.drawDiscussionCategoryInSliderMenu(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 240, y: 420, width: 240, height: 210)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        UserInterfaceDesign.drawArtCategoryInSliderMenu(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 0, y: 420, width: 240, height: 210)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        UserInterfaceDesign.drawVacationCategoryInSliderMenu(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class func imageOfEntertainmentCategory(pressed: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 768, height: 768), false, 0)
            UserInterfaceDesign.drawEntertainmentCategory(pressed: pressed)

        let imageOfEntertainmentCategory = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfEntertainmentCategory
    }

    public dynamic class func imageOfFoodCategory(pressed: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 800, height: 800), false, 0)
            UserInterfaceDesign.drawFoodCategory(pressed: pressed)

        let imageOfFoodCategory = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfFoodCategory
    }

    public dynamic class func imageOfSportCategory(pressed: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 563, height: 563), false, 0)
            UserInterfaceDesign.drawSportCategory(pressed: pressed)

        let imageOfSportCategory = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSportCategory
    }

    public dynamic class func imageOfDiscussionCategory(pressed: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 533, height: 533), false, 0)
            UserInterfaceDesign.drawDiscussionCategory(pressed: pressed)

        let imageOfDiscussionCategory = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfDiscussionCategory
    }

    public dynamic class func imageOfVacationCategory(pressed: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 564, height: 564), false, 0)
            UserInterfaceDesign.drawVacationCategory(pressed: pressed)

        let imageOfVacationCategory = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfVacationCategory
    }

    public dynamic class func imageOfArtCategory(pressed: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 768, height: 768), false, 0)
            UserInterfaceDesign.drawArtCategory(pressed: pressed)

        let imageOfArtCategory = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfArtCategory
    }

    public dynamic class func imageOfCustomTextField(pressed: Bool = true, textFieldText: String = "Default") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 349, height: 40), false, 0)
            UserInterfaceDesign.drawCustomTextField(pressed: pressed, textFieldText: textFieldText)

        let imageOfCustomTextField = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCustomTextField
    }

    public dynamic class func imageOfMyEvents(pressed: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 50), false, 0)
            UserInterfaceDesign.drawMyEvents(pressed: pressed)

        let imageOfMyEvents = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMyEvents
    }

    public dynamic class func imageOfEvents(pressed: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 50), false, 0)
            UserInterfaceDesign.drawEvents(pressed: pressed)

        let imageOfEvents = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfEvents
    }




    @objc(UserInterfaceDesignResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
